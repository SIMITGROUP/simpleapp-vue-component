/* tslint:disable */
/* eslint-disable */
/**
 * Formbuilder API
 * The cats API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

export interface PersonSalesAgent{
  id:string
  name:string
}
/**
 *
 * @export
 * @interface Person
 */
export interface Person {
  /**
   * record id
   * @type {string}
   * @memberof Person
   */
  _id?: string;
  /**
   * Document type
   * @type {string}
   * @memberof Person
   */
  isactive: boolean;
  blood:string;
  doctype: string;
  gender: string;
  colorgroup:string;
  group:string;
  salary:number;
  password:string;
  quality:number;
  subscribed:Array<string>;
  languages:Array<string>;  
  description:string;
  salesagent:PersonSalesAgent;

  /**
   *
   * @type {PersonName}
   * @memberof Person
   */
  name: PersonName;
  /**
   *
   * @type {number}
   * @memberof Person
   */
  age?: number;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  dob: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Person
   */
  hobbies: Array<string>;
  /**
   *
   * @type {Array<PersonAddresses>}
   * @memberof Person
   */
  addresses: Array<PersonAddresses>;
}
/**
 *
 * @export
 * @interface PersonAddresses
 */
export interface PersonAddresses {
  /**
   *
   * @type {string}
   * @memberof PersonAddresses
   */
  stid: string;
  /**
   *
   * @type {PersonAddressesStreet}
   * @memberof PersonAddresses
   */
  street: PersonAddressesStreet;
  /**
   *
   * @type {number}
   * @memberof PersonAddresses
   */
  postcode: number;
  /**
   *
   * @type {string}
   * @memberof PersonAddresses
   */
  updated: string;
}
/**
 *
 * @export
 * @interface PersonAddressesStreet
 */
export interface PersonAddressesStreet {
  /**
   *
   * @type {string}
   * @memberof PersonAddressesStreet
   */
  st1?: string;
  /**
   *
   * @type {string}
   * @memberof PersonAddressesStreet
   */
  st2?: string;
}
/**
 *
 * @export
 * @interface PersonName
 */
export interface PersonName {
  /**
   *
   * @type {string}
   * @memberof PersonName
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof PersonName
   */
  lastName: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetHello(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.appControllerGetHello(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello(options?: any): AxiosPromise<void> {
      return localVarFp
        .appControllerGetHello(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public appControllerGetHello(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .appControllerGetHello(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PERSONApi - axios parameter creator
 * @export
 */
export const PERSONApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary
     * @param {Person} person Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runCreate: async (
      person: Person,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'person' is not null or undefined
      assertParamExists('runCreate', 'person', person);
      const localVarPath = `/person`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        person,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runDelete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('runDelete', 'id', id);
      const localVarPath = `/person/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runFindOne: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('runFindOne', 'id', id);
      const localVarPath = `/person/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/person`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {Person} person Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runUpdate: async (
      id: string,
      person: Person,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('runUpdate', 'id', id);
      // verify required parameter 'person' is not null or undefined
      assertParamExists('runUpdate', 'person', person);
      const localVarPath = `/person/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        person,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PERSONApi - functional programming interface
 * @export
 */
export const PERSONApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PERSONApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {Person} person Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async runCreate(
      person: Person,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.runCreate(
        person,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async runDelete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.runDelete(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async runFindOne(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.runFindOne(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async runList(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.runList(
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {Person} person Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async runUpdate(
      id: string,
      person: Person,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.runUpdate(
        id,
        person,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * PERSONApi - factory interface
 * @export
 */
export const PERSONApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PERSONApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {Person} person Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runCreate(person: Person, options?: any): AxiosPromise<Person> {
      return localVarFp
        .runCreate(person, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runDelete(id: string, options?: any): AxiosPromise<Person> {
      return localVarFp
        .runDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runFindOne(id: string, options?: any): AxiosPromise<Person> {
      return localVarFp
        .runFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runList(options?: any): AxiosPromise<void> {
      return localVarFp
        .runList(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {Person} person Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runUpdate(id: string, person: Person, options?: any): AxiosPromise<Person> {
      return localVarFp
        .runUpdate(id, person, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PERSONApi - object-oriented interface
 * @export
 * @class PERSONApi
 * @extends {BaseAPI}
 */
export class PERSONApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {Person} person Data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PERSONApi
   */
  public runCreate(person: Person, options?: AxiosRequestConfig) {
    return PERSONApiFp(this.configuration)
      .runCreate(person, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PERSONApi
   */
  public runDelete(id: string, options?: AxiosRequestConfig) {
    return PERSONApiFp(this.configuration)
      .runDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PERSONApi
   */
  public runFindOne(id: string, options?: AxiosRequestConfig) {
    return PERSONApiFp(this.configuration)
      .runFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PERSONApi
   */
  public runList(options?: AxiosRequestConfig) {
    return PERSONApiFp(this.configuration)
      .runList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {Person} person Data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PERSONApi
   */
  public runUpdate(id: string, person: Person, options?: AxiosRequestConfig) {
    return PERSONApiFp(this.configuration)
      .runUpdate(id, person, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
